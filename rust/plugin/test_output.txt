warning: virtual workspace defaulting to `resolver = "1"` despite one or more workspace members being on edition 2021 which implies `resolver = "2"`
note: to keep the current resolver, specify `workspace.resolver = "1"` in the workspace root's manifest
note: to use the edition 2021 resolver, specify `workspace.resolver = "2"` in the workspace root's manifest
note: for more details see https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
warning: patchwork_rust v0.0.1 (/Users/nikita/Workspace/godot-ws/godot/modules/patchwork_editor/rust/plugin) ignoring invalid dependency `cargo-post` which is missing a lib target
warning: unused variable: `size`
   --> rust/plugin/post_build.rs:115:9
    |
115 |     let size = target_dirs.len();
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_size`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> rust/plugin/post_build.rs:54:9
   |
54 |     let mut target_dirs = vec![profile_dir.to_path_buf()];
   |         ----^^^^^^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> rust/plugin/post_build.rs:55:9
   |
55 |     let mut targets = vec![target];
   |         ----^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> rust/plugin/post_build.rs:181:8
    |
181 |             let mut args = vec![ "--force", "--deep", "--verbose", "-s", &identity, framework_path.to_str().unwrap()];
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: function `after_build` is never used
  --> rust/plugin/post_build.rs:11:4
   |
11 | fn after_build(){
   |    ^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `main` is never used
   --> rust/plugin/post_build.rs:191:4
    |
191 | fn main() {
    |    ^^^^

warning: variable `isCI` should have a snake case name
  --> rust/plugin/post_build.rs:21:9
   |
21 |     let isCI = env::var("CI").is_ok() && env::var("CI").unwrap() == "1";
   |         ^^^^ help: convert the identifier to snake case: `is_ci`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: `patchwork_rust` (build script) generated 7 warnings
   Compiling patchwork_rust v0.0.1 (/Users/nikita/Workspace/godot-ws/godot/modules/patchwork_editor/rust/plugin)
warning: patchwork_rust@0.0.1: Running write_build_info
warning: patchwork_rust@0.0.1: OUT_DIR=/Users/nikita/Workspace/godot-ws/godot/modules/patchwork_editor/target/debug/build/patchwork_rust-2f398bd0fea3f627/out
warning: patchwork_rust@0.0.1: PROFILE=debug
warning: patchwork_rust@0.0.1: TARGET=aarch64-apple-darwin
warning: patchwork_rust@0.0.1: Wrote to "/Users/nikita/Workspace/godot-ws/godot/modules/patchwork_editor/target/.lastbuild"
warning: unused import: `VariantType`
 --> rust/plugin/src/patchwork_config.rs:4:31
  |
4 | use godot::builtin::{Variant, VariantType};
  |                               ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ClassDb` and `meta::ParamType`
 --> rust/plugin/src/lib.rs:2:23
  |
2 | use godot::{classes::{ClassDb, Engine}, init::EditorRunBehavior, meta::ParamType, prelude::*};
  |                       ^^^^^^^                                    ^^^^^^^^^^^^^^^

warning: unnecessary parentheses around `if` condition
 --> rust/plugin/src/lib.rs:9:5
  |
9 |     if (Engine::singleton().has_singleton(singleton_name)) {
  |        ^                                                 ^
  |
  = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
  |
9 -     if (Engine::singleton().has_singleton(singleton_name)) {
9 +     if Engine::singleton().has_singleton(singleton_name) {
  |

warning: unused import: `safer_ffi::layout::into_raw`
 --> rust/plugin/src/godot_parser.rs:6:5
  |
6 | use safer_ffi::layout::into_raw;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `utils::print_doc`
  --> rust/plugin/src/godot_parser.rs:11:41
   |
11 | use crate::{doc_utils::SimpleDocReader, utils::print_doc};
   |                                         ^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around `if` condition
   --> rust/plugin/src/godot_parser.rs:924:12
    |
924 |         if (self.resource_type != "PackedScene") {
    |            ^                                   ^
    |
help: remove these parentheses
    |
924 -         if (self.resource_type != "PackedScene") {
924 +         if self.resource_type != "PackedScene" {
    |

warning: unused import: `automerge::op_tree::B`
 --> rust/plugin/src/godot_project.rs:2:5
  |
2 | use automerge::op_tree::B;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `futures::io::empty`
 --> rust/plugin/src/godot_project.rs:5:5
  |
5 | use futures::io::empty;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `godot::meta::AsArg`
 --> rust/plugin/src/godot_project.rs:9:5
  |
9 | use godot::meta::AsArg;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `safer_ffi::layout::OpaqueKind::T`
  --> rust/plugin/src/godot_project.rs:10:5
   |
10 | use safer_ffi::layout::OpaqueKind::T;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::BufWriter`
  --> rust/plugin/src/godot_project.rs:13:5
   |
13 | use std::io::BufWriter;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `godot::classes::EditorFileSystem`
  --> rust/plugin/src/godot_project.rs:24:5
   |
24 | use godot::classes::EditorFileSystem;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `godot::classes::EditorInterface`
  --> rust/plugin/src/godot_project.rs:25:5
   |
25 | use godot::classes::EditorInterface;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `godot::classes::Image`
  --> rust/plugin/src/godot_project.rs:26:5
   |
26 | use godot::classes::Image;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConfigFile` and `ResourceImporter`
  --> rust/plugin/src/godot_project.rs:30:22
   |
30 | use godot::classes::{ConfigFile, DirAccess, FileAccess, ResourceImporter};
   |                      ^^^^^^^^^^                         ^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around `if` condition
   --> rust/plugin/src/godot_project.rs:913:16
    |
913 |             if (prop_value.contains("SubResource(")) {
    |                ^                                   ^
    |
help: remove these parentheses
    |
913 -             if (prop_value.contains("SubResource(")) {
913 +             if prop_value.contains("SubResource(") {
    |

warning: unnecessary parentheses around `if` condition
   --> rust/plugin/src/godot_project.rs:915:23
    |
915 |             } else if (prop_value.contains("ExtResource(")) {
    |                       ^                                   ^
    |
help: remove these parentheses
    |
915 -             } else if (prop_value.contains("ExtResource(")) {
915 +             } else if prop_value.contains("ExtResource(") {
    |

warning: unnecessary parentheses around `if` condition
    --> rust/plugin/src/godot_project.rs:1162:12
     |
1162 |         if (change_type == "unchanged") {
     |            ^                          ^
     |
help: remove these parentheses
     |
1162 -         if (change_type == "unchanged") {
1162 +         if change_type == "unchanged" {
     |

warning: unnecessary parentheses around `if` condition
    --> rust/plugin/src/godot_project.rs:1171:12
     |
1171 |         if (old_content_type != VariantType::STRING && new_content_type != VariantType::STRING) {
     |            ^                                                                                  ^
     |
help: remove these parentheses
     |
1171 -         if (old_content_type != VariantType::STRING && new_content_type != VariantType::STRING) {
1171 +         if old_content_type != VariantType::STRING && new_content_type != VariantType::STRING {
     |

warning: unnecessary parentheses around `if` condition
    --> rust/plugin/src/godot_project.rs:1180:19
     |
1180 |         } else if (old_content_type != VariantType::PACKED_BYTE_ARRAY
     |                   ^
1181 |             && new_content_type != VariantType::PACKED_BYTE_ARRAY)
     |                                                                  ^
     |
help: remove these parentheses
     |
1180 ~         } else if old_content_type != VariantType::PACKED_BYTE_ARRAY
1181 ~             && new_content_type != VariantType::PACKED_BYTE_ARRAY
     |

warning: unnecessary parentheses around `if` condition
    --> rust/plugin/src/godot_project.rs:1533:24
     |
1533 |                     if (!loaded_ext_resources.contains_key(&path)) {
     |                        ^                                         ^
     |
help: remove these parentheses
     |
1533 -                     if (!loaded_ext_resources.contains_key(&path)) {
1533 +                     if !loaded_ext_resources.contains_key(&path) {
     |

warning: unnecessary parentheses around `if` condition
    --> rust/plugin/src/godot_project.rs:1621:39
     |
1621 | ...                   } else if (resource_path != new_resource_path) {
     |                                 ^                                  ^
     |
help: remove these parentheses
     |
1621 -                             } else if (resource_path != new_resource_path) {
1621 +                             } else if resource_path != new_resource_path {
     |

warning: unused import: `godot_parser`
  --> rust/plugin/src/godot_project_driver.rs:17:5
   |
17 |     godot_parser,
   |     ^^^^^^^^^^^^

warning: unused import: `Instant`
 --> rust/plugin/src/utils.rs:4:12
  |
4 |     time::{Instant, SystemTime},
  |            ^^^^^^^

warning: unused import: `RepoHandle`
  --> rust/plugin/src/utils.rs:12:45
   |
12 | use automerge_repo::{DocHandle, DocumentId, RepoHandle};
   |                                             ^^^^^^^^^^

warning: unused import: `Array`
  --> rust/plugin/src/utils.rs:13:22
   |
13 | use godot::builtin::{Array, GString, PackedStringArray};
   |                      ^^^^^

warning: unused import: `serde_json::Serializer`
  --> rust/plugin/src/utils.rs:15:5
   |
15 | use serde_json::Serializer;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::mpsc::channel`
 --> rust/plugin/src/file_system_driver.rs:9:5
  |
9 | use std::sync::mpsc::channel;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration as StdDuration`
  --> rust/plugin/src/file_system_driver.rs:10:5
   |
10 | use std::time::Duration as StdDuration;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Read`
  --> rust/plugin/src/file_system_driver.rs:13:15
   |
13 | use std::io::{Read, Write};
   |               ^^^^

warning: unused imports: `Hash` and `Md5Error`
  --> rust/plugin/src/file_system_driver.rs:14:25
   |
14 | use ya_md5::{Md5Hasher, Hash, Md5Error};
   |                         ^^^^  ^^^^^^^^

warning: unused import: `tokio::sync::mpsc`
   --> rust/plugin/src/file_system_driver.rs:312:9
    |
312 |     use tokio::sync::mpsc;
    |         ^^^^^^^^^^^^^^^^^

warning: unused variable: `old_heads`
   --> rust/plugin/src/godot_project.rs:366:9
    |
366 |         old_heads: PackedStringArray,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_heads`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `curr_heads`
   --> rust/plugin/src/godot_project.rs:367:9
    |
367 |         curr_heads: PackedStringArray,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_curr_heads`

warning: unused variable: `a`
   --> rust/plugin/src/godot_project.rs:384:21
    |
384 |                 let a = c.message();
    |                     ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: variable does not need to be mutable
   --> rust/plugin/src/godot_project.rs:847:13
    |
847 |         let mut dir_access = DirAccess::open(&root);
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> rust/plugin/src/godot_project.rs:880:13
    |
880 |         let mut dir_access = DirAccess::open(&root);
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `i`
   --> rust/plugin/src/godot_project.rs:979:14
    |
979 |         for (i, hunk) in unified.iter_hunks().enumerate() {
    |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `header`
   --> rust/plugin/src/godot_project.rs:981:17
    |
981 |             let header = hunk.header();
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_header`

warning: unused variable: `idx`
   --> rust/plugin/src/godot_project.rs:988:18
    |
988 |             for (idx, change) in hunk.iter_changes().enumerate() {
    |                  ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `added_node_ids`
    --> rust/plugin/src/godot_project.rs:1318:21
     |
1318 |             let mut added_node_ids: HashSet<String> = HashSet::new();
     |                     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_added_node_ids`

warning: unused variable: `deleted_node_ids`
    --> rust/plugin/src/godot_project.rs:1319:21
     |
1319 |             let mut deleted_node_ids: HashSet<String> = HashSet::new();
     |                     ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deleted_node_ids`

warning: unused variable: `insert_node_modification`
    --> rust/plugin/src/godot_project.rs:1323:21
     |
1323 |             let mut insert_node_modification = |node_id: &String, change_op: ChangeOp| {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_insert_node_modification`

warning: unused variable: `action`
    --> rust/plugin/src/godot_project.rs:1341:45
     |
1341 |                     |PathWithAction { path, action }| match path.first() {
     |                                             ^^^^^^ help: try ignoring the field: `action: _`

warning: unused variable: `action`
    --> rust/plugin/src/godot_project.rs:1365:45
     |
1365 |                     |PathWithAction { path, action }| match path.first() {
     |                                             ^^^^^^ help: try ignoring the field: `action: _`

warning: unused variable: `action`
    --> rust/plugin/src/godot_project.rs:1380:45
     |
1380 |                     |PathWithAction { path, action }| match path.first() {
     |                                             ^^^^^^ help: try ignoring the field: `action: _`

warning: unused variable: `content_key`
    --> rust/plugin/src/godot_project.rs:1478:38
     |
1478 | ...                   content_key: &str| {
     |                       ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_content_key`

warning: value assigned to `path` is never read
    --> rust/plugin/src/godot_project.rs:1496:25
     |
1496 |                 let mut path: Option<String> = None;
     |                         ^^^^
     |
     = help: maybe it is overwritten before being read?
     = note: `#[warn(unused_assignments)]` on by default

warning: variable does not need to be mutable
    --> rust/plugin/src/godot_project.rs:1308:17
     |
1308 |             let mut all_changed_ext_resource_paths: HashSet<String> = HashSet::new();
     |                 ----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> rust/plugin/src/godot_project.rs:1318:17
     |
1318 |             let mut added_node_ids: HashSet<String> = HashSet::new();
     |                 ----^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> rust/plugin/src/godot_project.rs:1319:17
     |
1319 |             let mut deleted_node_ids: HashSet<String> = HashSet::new();
     |                 ----^^^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> rust/plugin/src/godot_project.rs:1323:17
     |
1323 |             let mut insert_node_modification = |node_id: &String, change_op: ChangeOp| {
     |                 ----^^^^^^^^^^^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> rust/plugin/src/godot_project.rs:1219:13
     |
1219 |         let mut changed_files = get_changed_files_vec(&patches);
     |             ----^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `e`
    --> rust/plugin/src/godot_project.rs:1813:17
     |
1813 |             Err(e) => None,
     |                 ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `driver_input_rx`
    --> rust/plugin/src/godot_project.rs:1851:31
     |
1851 |         let (driver_input_tx, driver_input_rx) = futures::channel::mpsc::unbounded();
     |                               ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_driver_input_rx`

warning: unused variable: `driver_output_tx`
    --> rust/plugin/src/godot_project.rs:1852:14
     |
1852 |         let (driver_output_tx, driver_output_rx) = futures::channel::mpsc::unbounded();
     |              ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_driver_output_tx`

warning: variable does not need to be mutable
    --> rust/plugin/src/godot_project.rs:1854:13
     |
1854 |         let mut ret = Self {
     |             ----^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `input_tx`
   --> rust/plugin/src/file_system_driver.rs:339:14
    |
339 |         let (input_tx, input_rx) = futures::channel::mpsc::unbounded();
    |              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_tx`

warning: unused variable: `input_tx`
   --> rust/plugin/src/file_system_driver.rs:404:14
    |
404 |         let (input_tx, input_rx) = futures::channel::mpsc::unbounded();
    |              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_tx`

warning: methods `get_bytes` and `get_float` are never used
  --> rust/plugin/src/doc_utils.rs:5:8
   |
4  | pub trait SimpleDocReader {
   |           --------------- methods in this trait
5  |     fn get_bytes<O: AsRef<ObjId>, P: Into<Prop>>(&self, obj: O, prop: P) -> Option<Vec<u8>>;
   |        ^^^^^^^^^
...
16 |     fn get_float<O: AsRef<ObjId>, P: Into<Prop>>(&self, obj: O, prop: P) -> Option<f64>;
   |        ^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: method `get_ext_resource_path` is never used
   --> rust/plugin/src/godot_parser.rs:144:5
    |
111 | impl GodotScene {
    | --------------- method in this implementation
...
144 |     fn get_ext_resource_path(&self, ext_resource_id: &str) -> Option<String> {
    |        ^^^^^^^^^^^^^^^^^^^^^

warning: struct `GodotProjectState` is never constructed
   --> rust/plugin/src/godot_project.rs:123:8
    |
123 | struct GodotProjectState {
    |        ^^^^^^^^^^^^^^^^^

warning: variants `Added`, `Removed`, and `Modified` are never constructed
   --> rust/plugin/src/godot_project.rs:143:5
    |
142 | enum ChangeOp {
    |      -------- variants in this enum
143 |     Added,
    |     ^^^^^
144 |     Removed,
    |     ^^^^^^^
145 |     Modified,
    |     ^^^^^^^^

warning: method `get_class_name` is never used
   --> rust/plugin/src/godot_project.rs:826:8
    |
149 | impl GodotProject {
    | ----------------- method in this implementation
...
826 |     fn get_class_name(&self, script_content: String) -> String {
    |        ^^^^^^^^^^^^^^

warning: static `GODOT_PROJECT` is never used
    --> rust/plugin/src/godot_project.rs:1846:12
     |
1846 | static mut GODOT_PROJECT: Option<GodotProject> = None;
     |            ^^^^^^^^^^^^^

warning: field `diff` is never read
   --> rust/plugin/src/godot_project_driver.rs:109:9
    |
107 |     Changed {
    |     ------- field in this variant
108 |         doc_handle: DocHandle,
109 |         diff: Vec<automerge::Patch>,
    |         ^^^^

warning: field `path` is never read
   --> rust/plugin/src/godot_project_driver.rs:119:5
    |
117 | pub struct BinaryDocState {
    |            -------------- field in this struct
118 |     doc_handle: Option<DocHandle>, // is null if the binary doc is being requested but not loaded yet
119 |     path: String,
    |     ^^^^
    |
    = note: `BinaryDocState` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: function `print_branch_doc` is never used
  --> rust/plugin/src/utils.rs:66:15
   |
66 | pub(crate) fn print_branch_doc(message: &str, doc_handle: &DocHandle) {
   |               ^^^^^^^^^^^^^^^^

warning: function `print_doc` is never used
  --> rust/plugin/src/utils.rs:80:15
   |
80 | pub(crate) fn print_doc(message: &str, doc_handle: &DocHandle) {
   |               ^^^^^^^^^

warning: method `stop` is never used
   --> rust/plugin/src/file_system_driver.rs:300:18
    |
52  | impl FileSystemDriver {
    | --------------------- method in this implementation
...
300 |     pub async fn stop(&self) {
    |                  ^^^^

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1102:9
     |
1102 |         content.insert("name", node.name.clone());
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
     |
1102 |         let _ = content.insert("name", node.name.clone());
     |         +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1107:17
     |
1107 |                 content.insert("type", type_name.clone());
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1107 |                 let _ = content.insert("type", type_name.clone());
     |                 +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1110:17
     |
1110 |                 content.insert("instance", instance_id.clone());
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1110 |                 let _ = content.insert("instance", instance_id.clone());
     |                 +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1116:13
     |
1116 |             content.insert("owner", owner.clone());
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1116 |             let _ = content.insert("owner", owner.clone());
     |             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1119:13
     |
1119 |             content.insert("index", index);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1119 |             let _ = content.insert("index", index);
     |             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1122:13
     |
1122 |             content.insert("groups", groups.clone());
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1122 |             let _ = content.insert("groups", groups.clone());
     |             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1128:13
     |
1128 |             properties.insert(key.clone(), property.value.clone());
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1128 |             let _ = properties.insert(key.clone(), property.value.clone());
     |             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_parser.rs:1130:9
     |
1130 |         content.insert("properties", properties);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1130 |         let _ = content.insert("properties", properties);
     |         +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1662:21
     |
1662 |                     node_info.insert("change_type", "removed");
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1662 |                     let _ = node_info.insert("change_type", "removed");
     |                     +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1664:25
     |
1664 |                         node_info.insert("node_path", scene.get_node_path(&node_id));
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1664 |                         let _ = node_info.insert("node_path", scene.get_node_path(&node_id));
     |                         +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1666:29
     |
1666 | ...                   node_info.insert("old_content", content);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1666 |                             let _ = node_info.insert("old_content", content);
     |                             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1672:21
     |
1672 |                     node_info.insert("change_type", "added");
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1672 |                     let _ = node_info.insert("change_type", "added");
     |                     +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1674:25
     |
1674 |                         node_info.insert("node_path", scene.get_node_path(&node_id));
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1674 |                         let _ = node_info.insert("node_path", scene.get_node_path(&node_id));
     |                         +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1676:29
     |
1676 | ...                   node_info.insert("new_content", content);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1676 |                             let _ = node_info.insert("new_content", content);
     |                             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1682:21
     |
1682 |                     node_info.insert("change_type", "modified");
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1682 |                     let _ = node_info.insert("change_type", "modified");
     |                     +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1685:25
     |
1685 |                         node_info.insert("node_path", scene.get_node_path(node_id));
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1685 |                         let _ = node_info.insert("node_path", scene.get_node_path(node_id));
     |                         +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1700:29
     |
1700 | ...                   node_info.insert("old_content", content);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1700 |                             let _ = node_info.insert("old_content", content);
     |                             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1712:29
     |
1712 | ...                   node_info.insert("new_content", content);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1712 |                             let _ = node_info.insert("new_content", content);
     |                             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1720:25
     |
1720 |                         node_info.insert("change_type", "type_changed");
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1720 |                         let _ = node_info.insert("change_type", "type_changed");
     |                         +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1747:29
     |
1747 | ...                   node_info.insert("changed_props", changed_props);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1747 |                             let _ = node_info.insert("changed_props", changed_props);
     |                             +++++++

warning: unused return value of `godot::prelude::Dictionary::insert` that must be used
    --> rust/plugin/src/godot_project.rs:1753:13
     |
1753 |             result.insert("changed_nodes", changed_nodes);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
help: use `let _ = ...` to ignore the resulting value
     |
1753 |             let _ = result.insert("changed_nodes", changed_nodes);
     |             +++++++

warning: `patchwork_rust` (lib test) generated 91 warnings (run `cargo fix --lib -p patchwork_rust --tests` to apply 40 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.81s
     Running unittests src/lib.rs (/Users/nikita/Workspace/godot-ws/godot/modules/patchwork_editor/target/debug/deps/patchwork_rust_core-850c20cab571591c)

running 3 tests
test file_system_driver::tests::test_file_system_update_events ... FAILED
