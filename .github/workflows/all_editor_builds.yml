name: Build Editor All Platforms
on:
  workflow_call:

# Global Settings
# SCONS_CACHE for windows must be set in the build environment
env:
  GODOT_REPOSITORY: nikitalita/godot
  GODOT_BASE_BRANCH: master
  # Change the README too
  GODOT_MAIN_SYNC_REF: patchwork-4.4
  SCONSFLAGS: verbose=yes warnings=all werror=no module_text_server_fb_enabled=no minizip=yes deprecated=yes module_patchwork_editor_enabled=yes
  SCONSFLAGS_TEMPLATE: no_editor_splash=yes module_camera_enabled=no module_mobile_vr_enabled=no module_upnp_enabled=no module_websocket_enabled=no module_csg_enabled=yes module_gridmap_enabled=yes use_static_cpp=yes builtin_freetype=yes builtin_libpng=yes builtin_zlib=yes builtin_libwebp=yes builtin_libvorbis=yes builtin_libogg=yes disable_3d=no
  SCONS_CACHE_MSVC_CONFIG: true

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  build:
    # Windows 10 with latest image
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Windows Editor"
            os: "windows-latest"
            id: windows-editor
            platform: windows
            target: editor
            sconsflags: tests=yes debug_symbols=yes
            bin: ./bin/godot.windows.editor.x86_64.exe

          - name: "üêß Linux Editor"
            os: "ubuntu-22.04"
            id: linux-editor
            platform: linux
            target: editor
            sconsflags: tests=yes
            sconsflags-template: optimize=size use_lto=yes debug_symbols=no
            bin: ./bin/godot.linuxbsd.editor.x86_64

          - name: "üçé macOS Editor"
            os: "macos-latest"
            id: macos-editor
            platform: macos
            target: editor
            sconsflags: tests=yes use_volk=no vulkan_sdk_path=$VULKAN_SDK_PATH use_lto=yes debug_symbols=no
            bin: ./bin/godot.macos.editor.arm64

    steps:
      - name: checkout-godot
        uses: actions/checkout@v4
        with:
          repository: ${{env.GODOT_REPOSITORY}}
          ref: ${{env.GODOT_MAIN_SYNC_REF}}

      - name: checkout-patchwork_editor
        uses: actions/checkout@v4
        with:
          path: modules/patchwork_editor
          fetch-depth: 0

      - name: copy actions
        shell: bash
        run: |
          cp -R modules/patchwork_editor/.github/actions/* .github/actions/

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        id: restore-cache
        with:
          cache-name: ${{ matrix.id }}-${{ matrix.target }}
        continue-on-error: true

      - name: Install Linux deps
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
            libudev-dev libxi-dev libxrandr-dev yasm clang-format libwayland-bin
          sudo apt-get install libwayland-bin

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Setup Vulkan SDK
        if: matrix.platform == 'macos'
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      - name: Compile Editor (x86_64)
        if: matrix.target == 'editor'
        id: compile-editor
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ${{ matrix.platform }}
          target: editor
          tests: false
          scons-cache-limit: 4096

      - name: Compile Editor for macos arm64
        uses: ./.github/actions/godot-build
        if: matrix.platform == 'macos' && matrix.target == 'editor'
        with:
          # generate the bundle on this one; generate_bundle automatically lipos the binaries
          sconsflags: arch=arm64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} generate_bundle=yes
          platform: ${{ matrix.platform }}
          target: editor
          tests: false
          scons-cache-limit: 4096

      - name: cleanup macos
        if: matrix.platform == 'macos' && matrix.target == 'editor'
        shell: bash
        run: |
          rm -f ./bin/godot.macos.*
          chmod +x bin/godot_macos_editor.app/Contents/MacOS/Godot

      - name: Prepare artifact
      # Stripping the debug symbols screws up lipo'd binaries on macos, so don't do it
        if: matrix.platform != 'macos'
        uses: ./.github/actions/godot-prepare-artifact

      - name: Save Godot build cache
        # if: success() || (steps.restore-cache.outputs.cache-hit == 'false' && (steps.compile-editor.outcome != 'skipped' || steps.compile-template.outcome != 'skipped'))
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.id }}-${{ matrix.target }}
        continue-on-error: true

      - name: Mac Sign
        if: matrix.platform == 'macos' && matrix.target == 'editor'
        uses: ./.github/actions/macos-sign
        with:
          FRAMEWORK_PATH: ${{ github.workspace }}/bin/godot_macos_editor.app
          SIGN_FLAGS: "--deep --force --options=runtime --entitlements ${{ github.workspace }}/misc/dist/macos/editor.entitlements"
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_DEV_PASSWORD: ${{ secrets.APPLE_DEV_PASSWORD }}
          APPLE_DEV_ID: ${{ secrets.APPLE_DEV_ID }}
          APPLE_DEV_TEAM_ID: ${{ secrets.APPLE_DEV_TEAM_ID }}
          APPLE_DEV_APP_ID: ${{ secrets.APPLE_DEV_APP_ID }}
          # TODO: change this to com.inkandswitch.patchworkgodoteditor after I&S dev cert is set up
          BUNDLE_IDENTIFIER_OVERRIDE: "com.inkandswitch.test.patchworkgodoteditor"

      - uses: actions/upload-artifact@v4
        if: matrix.id != 'linux-sanitizers'
        with:
          name: patchwork_editor-${{ matrix.platform }}
          path: ${{github.workspace}}/bin/*
          retention-days: 90

  # test:
  #   needs: build
  #   runs-on: ${{ matrix.os }}
  #   name: ${{ matrix.name }} test
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - name: "Windows"
  #           os: "windows-latest"
  #           platform: windows
  #           bin: ./bin/godot.windows.editor.x86_64.exe

  #         - name: "üêß Linux"
  #           os: "ubuntu-24.04"
  #           platform: linux
  #           bin: ./bin/godot.linuxbsd.editor.x86_64

  #         - name: "üçé macOS"
  #           os: "macos-latest"
  #           platform: macos
  #           bin: ./bin/godot.macos.editor.arm64

  #   steps:
  #     - name: checkout-godot
  #       uses: actions/checkout@v4
  #       with:
  #         repository: GODOT_REPOSITORY
  #         ref: ${{env.GODOT_MAIN_SYNC_REF}}

  #     - name: checkout-patchwork_editor
  #       uses: actions/checkout@v4
  #       with:
  #         path: modules/patchwork_editor
  #         fetch-depth: 0

  #     - name: copy actions
  #       shell: bash
  #       run: |
  #         cp -R modules/patchwork_editor/.github/actions/* .github/actions/

  #     - name: Download patchwork_editor artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: patchwork_editor-editor-${{ matrix.platform }}
  #         path: bin

  #     - name: set permissions
  #       shell: bash
  #       run: |
  #         chmod a+x bin/godot*

  #     - name: run tests
  #       shell: bash
  #       run: |
  #         ${{matrix.bin}} --headless --test --force-colors "--test-case=[patchwork_editor]*"

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
    needs: [build]
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: patchwork_editor-linux
          path: artifacts/linux
      - name: Download MacOS artifact
        uses: actions/download-artifact@v4
        with:
          name: patchwork_editor-macos
          path: artifacts/macos
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: patchwork_editor-windows
          path: artifacts/windows

      - name: Sign Artifact with CodeSignTool
        uses: sslcom/esigner-codesign@develop
        with:
          # CodeSignTool Commands:
          # - get_credential_ids: Output the list of eSigner credential IDs associated with a particular user.
          # - credential_info: Output key and certificate information related to a credential ID.
          # - sign: Sign and timestamp code object.
          # - batch_sign: Sign and timestamp multiple code objects with one OTP.
          # - hash: Pre-compute hash(es) for later use with batch_hash_sign command.
          # - batch_sign_hash: Sign hash(es) pre-computed with hash command.
          command: sign

          # SSL.com account username..
          username: ${{secrets.ES_USERNAME}}

          # SSL.com account password.
          password: ${{secrets.ES_PASSWORD}}

          # Credential ID for signing certificate.
          credential_id: ${{secrets.CREDENTIAL_ID}}

          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{secrets.ES_TOTP_SECRET}}

          # Path of code object to be signed.
          # Supported File Types: acm, ax, bin, cab, cpl, dll, drv, efi, exe, mui, ocx, scr, sys, tsp, msi, ps1, ps1xml, js, vbs, wsf, jar, ovf, ova, nupkg
          file_path: ${GITHUB_WORKSPACE}/artifacts/windows/godot.windows.editor.x86_64.exe

          # # Input directory for code objects to be signed, have hashes computed, or pick unsigned files and corresponding hashes for signing.
          # dir_path: ${GITHUB_WORKSPACE}/test/src/build

          # Directory where signed code object(s) will be written.
          output_path: ${GITHUB_WORKSPACE}/artifacts/windows

          # Scans your file for any possible malware in order to avoid code compromise and prevents signing of code if malware is detected.
          # On batch_sign command: If you are getting 'Error: hash needs to be scanned first before submitting for signing: <hash_value>', you can set this value to true
          malware_block: false

          # Overrides the input file after signing, if this parameter is set and no -output_dir_path parameter
          override: false

          # This variable are optional, and specify the environment name. If omitted, the environment name will be set to PROD and use production code_sign_tool.properties file. For signing artifact with demo account, the environment name will be set to TEST.
          environment_name: TEST

          # Clean log files after code signing operations
          clean_logs: true

          # Code signing method. Default is v1. Supported values: v1, v2
          signing_method: v1
      - name: Zip artifacts
        run: |
          ls -la artifacts/*
          cd artifacts/windows
          zip -r9  "../patchwork_editor-${{ github.ref_name }}-windows.zip" *
          cd ../..
          cd artifacts/macos
          zip -r9  "../patchwork_editor-${{ github.ref_name }}-macos.zip" *
          cd ../..
          cd artifacts/linux
          zip -r9  "../patchwork_editor-${{ github.ref_name }}-linux.zip" *
      - name: Release
        uses: nikitalita/action-gh-release@v1.0
        with:
          files: |
            artifacts/patchwork_editor-${{ github.ref_name }}-windows.zip
            artifacts/patchwork_editor-${{ github.ref_name }}-macos.zip
            artifacts/patchwork_editor-${{ github.ref_name }}-linux.zip
